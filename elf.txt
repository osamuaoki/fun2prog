== ELF

In this chapter, I will play with
http://en.wikipedia.org/wiki/Executable_and_Linkable_Format[ELF] files
generated from the same `hello.c` program file as the one in the 
<<_c,Hello World: C>> with the debug information to learn how it works.

See the following for the he http://en.wikipedia.org/wiki/Executable_and_Linkable_Format[ELF]:

* The wikipedia: http://en.wikipedia.org/wiki/Executable_and_Linkable_Format[ELF]
* The man page `elf`(5).
* http://www.iecc.com/linker/[Linkers and Loaders] (draft) for their mechanism.
* http://www.ualberta.ca/CNS/RESEARCH/LinuxClusters/mem.html[Understanding Memory] for mechanism of the memory system on Linux.
* http://www.acsu.buffalo.edu/~charngda/elf.html[Executable and Linkable Format (ELF)]
* http://www.acsu.buffalo.edu/~charngda/bfd.html[GNU Binutils and BFD]

An ELF file has two views: 

* The section header lists the set of sections of the binary. (`readelf -S`)
* The program header shows the segments used at run-time. (`readelf -l`)

TIP: Both `readelf` and `objdump` offer similar functions.  The `readelf`
command exists independently of the BFD library, so if there is a bug in the
BFD `objdump` command then `readelf` will not be affected.  Only the `objdump`
command can do disassemble.

=== Compile hello-gdb

Let's compile the `hello.c` program file into the
http://en.wikipedia.org/wiki/Executable_and_Linkable_Format[ELF] executable
`hello-gdb` with the additional flags.

* `-g` flag produces debugging information in the operating system's native format (http://en.wikipedia.org/wiki/DWARF[DWARF] on GNU/Linux).
* `-v` flag produces verbose output of the commands executed to run the stages of compilation.

-----
include::hello/c/hello-gdb.log[]
-----

Here the `gcc` command steps through 3 stages of compilation with 3 sub-commands:

* `/usr/lib/gcc/x86_64-linux-gnu/4.7/cc1` which is roughly the `gcc -S` command (Compiler from the C code to the assembler code).
* `as` which is the assembler. (The `gcc -c` stops after this.)
* `/usr/lib/gcc/x86_64-linux-gnu/4.7/collect2` which is roughly equivalent of the good old `ld` (linker).

FYI:

-----
include::hello/c/collect2.log[]
-----

In order to understand how linker works to create an executable from an object file, let me make the `hello.o` and `hello-gdb.o` ELF object files with the `gcc -c` command.

-----
include::hello/c/hello-gdbo.log[]
-----

So including the `hello` file generated in <<_c,Hello World!: C>>, we have 4 ELF files to play with.

.Summary of options and generated files from `hello.c`.
[frame="topbot",options="header"]
|=============
2+| object file 2+| executable file
| *option* | *file* | *option* | *file*
| `-c` | `hello.o` |  | `hello`
| `-c -g` | `hello-gdb.o` | `-g` | `hello-gdb`
|=============

=== size

Here is the size of the ELF files.

.Size of the ELF file generated from `hello.c`.
----
include::hello/c/hello-size.log[]
----

The GNU `size` command lists the section sizes -- and the total size -- for each of the object or archive files in its argument list.

* The `text` column is the size of the executable instructions of a program in the decimal expression.
* The `data` column is the size of the initialized data that contribute to the program's memory image in the decimal expression.
* The `bss` column is the size of the uninitialized data that contributes to the program's memory image in the decimal expression.
* The `dec` column is the total size of the `text`, `data`, and `bss` sections in the decimal expression.
* The `hex` column is the total size of the `text`, `data`, and `bss` sections in the hexadecimal expression.

Since the difference between `hello` and `hello-gdb` is the debug information, they share the same values with `size`(1) but their file size is different with `ls`(1).

The `text` column of `hello-gdb` is much larger than that of `hello-gdb.o` since the linker seems to link few additional object files such as `crt1.o`, `crti.o`, etc.

These will be elucidated from the following results.

=== readelf --file-header

Here are the ELF file header of the `hello` file.

.ELF file Header of the `hello` file.
----
include::hello/c/hello-readelf-h.log[]
----

TIP: `-h` = `--file-header`

Let's compare the ELF file headers of the compiled `hello.c`.

.ELF file headers of the compiled `hello.c`
include::hello/bench/elf-header.txt[]


=== readelf --sections

The section header lists the set of sections of the binary.

Here are the sections in these ELF files.

.Sections of the `hello-gdb` file.
----
include::hello/c/hello-gdb-readelf-S.log[]
----

TIP: `-S` = `--sections` = `--section-headers`

Let's compare the ELF file sections of the compiled `hello.c`.

.ELF file sections of the compiled `hello.c`
include::hello/bench/elf-section.txt[]

Here, N/A stands for "not available".

Let's compaire the `.text` size reported by `size` and `readelf -S`.

.Comparison of the reported size.
[cols="1,2,4",frame="topbot",options="header"]
|=============
| *file*    | *size*                | *readelf*
| `hello.o` | *text* = 91 = 0x5b    | *.text* + *.rodata* + *.eh_frame* = 0x5b
| `hello`   | *text* = 1350 = 0x546 | all marked `text` in `size` column = 0x53b = 1339 (11 bytes mismatch)
| `hello`   | *data* = 568 = 0x238  | *.dynamic* + *.got* + *.got.plt* + *.data* + *.jcr* + *.fini_array* + *.init.array* = 0x238
| `hello`   | *bss*  = 4   = 0x4    | *.bss*  = 0x4
|=============

FIXME: Why different?

Here you see some additional sections marked as `.debug_*` exist since you compiled the `hello-gdb.o` and `hello-gdb` files with the `-g` option.  The `hello.o` and `hello` files do not have these debug sections.

Various sections are described in the man page `elf`(5) after "Various sections hold program and control information:".

TIP: The `objdump -h` outputs very similar results.

=== readelf --segments

The program header shows the segments used at run-time.  So this is only available for the ELF executable files.

Here are the program headers (=segments) in these ELF files.

.Program headers of the `hello` file.
----
include::hello/c/hello-readelf-l.log[]
----

// .Segment headers of the `hello-gdb` file.
// ----
// include::hello/c/hello-gdb-readelf-l.log[]
// ----

Segment headers of the `hello-gdb` file is the same as that of the `hello` file.

TIP: `-l` = `--segments` = `--program-headers`

Various sections are described mostly in the man page `elf`(5) under `p_type`.

* `PHDR` is for the program header table.
* `INTERP` is for the interpreter path ASCIIZ string for starting the executable file.
* `LOAD` is for the loadable segment. (may be repeated)
* `DYNAMIC` is for the dynamic linking information.
* `NOTE` is for auxiliary information.
* `GNU_EH_FRAME` is for exception handling. (DWARF, see http://refspecs.linuxfoundation.org/LSB_3.0.0/LSB-Core-generic/LSB-Core-generic/ehframechpt.html[LSB Exception Frames])
* `GNU_STACK` is for the controling the stack on Linux. (GNU extension)

TIP: The `objdump -p` outputs somewhat similar results.

=== hexdump

Here is a plain hexadecimal dump of the entire `hello-gdb` file.  (some parts trimmed)

.Hexdump of the `hello-gdb` file.
----
include::hello/c/hello-gdb-hd.log[]
----

Here is a nicer hexadecimal dump with all sections clearly marked by the `objdump` command for the `hello-gdb` ELF object.

.Hexadecimal dump for all sections of the `hello-gdb` ELF object.
----
include::hello/c/hello-gdb-objdump-s.log[]
----

Here is another hexadecimal dump for a section by the `readelf` command for the `hello-gdb` ELF object.

.Hexadecimal dump for the `.text` section of the `hello-gdb` ELF object.
----
include::hello/c/hello-gdb-readelf-xtext.log[]
----

As expected, these are all almost incomprehensible for human.  

The `readelf` and `objdump` commands display the correct
http://en.wikipedia.org/wiki/Virtual_memory[virtual memory] address for the ELF
object after this is loaded to the memory.  The base address to load this is at
0x400000 (4 MiB) for GNU/Linux(amd64 = X86-64).  The above plain hexadecimal
dump displays the physical address in the file and does not count this base
address offset in the 
http://en.wikipedia.org/wiki/Virtual_memory[virtual memory].

=== readelf -a

Here are all non-debug contents by the `readelf` command of the `hello-gdb` ELF object.

.All contents by the `readelf` command for the `hello-gdb` ELF object.
----
include::hello/c/hello-gdb-readelf-a.log[]
----

The ELF file data structure is clearly analyzed excluding the debug contents.

The code content of the program is not disassembled.

=== readelf -wL

The `readelf -wL` command lists the decoded dump of debug contents of section `.debug_line`.

It lists the source file name with path.  Then each C source line nember is matched with its starting address.

For the `hello-gdb` ELF object, the `readelf -wL` command lists the C source line numbers as follows.

.All the source line numbers listed by the `readelf -wL` command for the `hello-gdb` ELF object.
----
include::hello/c/hello-gdb-readelf-wL.log[]
----

TIP: The `objdump -WL` outputs very similar results. (The upper case W!)

TIP: All debug contents can be displayed at once by the `readelf -w` (or `objdump -W`) command.

=== objdump -d

Here is a disassembled code dump by the `objdump` command for the `hello-gdb.o` ELF object.

.Disassembled code dump by the `objdump` command for the `hello-gdb.o` ELF object.
----
include::hello/c/hello-gdbo-objdump-d.log[]
----

Now we see the binary code in the readable assembler format.

Since code is not linked, some address data are left as 0 which will be filled by the linker.

Here is a disassembled code dump by the `objdump` command for the `hello-gdb` ELF object.

.Disassembled code dump by the `objdump` command for the `hello-gdb` ELF object.
----
include::hello/c/hello-gdb-objdump-d.log[]
----

Now we see the binary code in the readable assembler format.

You also see many codes in addition to the `main` function existed in the `hello-gdb.o` ELF object since the linker seems to link few additional object files such as `crt1.o`, `crti.o`, etc.

Also some unresolved address references in the `hello-gdb.o` ELF object is resolved.

For example, let's trace `call puts` in the assembler source `hello.s` as follows.

.Code to `call puts` in the `hello.s`. (No address resolution)
----
    call    puts
----

We see the following for the relocatable object `hello-gdb.o`.

.Code to `call puts` in the `hello-gdb.o`. (No address resolution)
----
     9:    e8 00 00 00 00           callq  e <main+0xe>
----

We see the following for the executable `hello-gdb`.

.Code to `call puts` in the `hello-gdb`. (Address resolved)
----
4005b5:    e8 d6 fe ff ff           callq  400490 <puts@plt>
----

Later we will see the following under GDB.

.Code to `call puts` in the `hello-gdb` viewed from `(gdb) disassembler/r main`. (Address resolved)
----
0x00000000004005b5 <+9>:	e8 d6 fe ff ff	callq  0x400490 <puts@plt>
----

=== objdump -S

Here is a disassembled code dump by the `objdump` command for the `hello-gdb.o` ELF object with the original C source code.

.Disassembled code dump by the `objdump` command for the `hello-gdb.o` ELF object with the original C source code.
----
include::hello/c/hello-gdbo-objdump-S.log[]
----

The ELF file only contains the location of the original C source code and correspondence to lines in it. 

Since code is not linked, some address data are left as 0 which will be filled by the linker.

If you run `objdump -S hello-gdb`, you get a long disassembled list with the original C source code.  Its addresses are resolved.

=== Core dump

When a user-process crashes, traditional Unix-like systems create a `core` file
in the current directory if it is enabled.  This is called
http://en.wikipedia.org/wiki/Core_dump[core dump] file which records the state
of the working memory of the crashed user-process program.  It is stored in the
ELF file format on Linux.

In order to enable the creation of this `core` file, you need to set the core
file size to `unlimited` with the shell's `ulimit -c unlimited` command in
advance. 

.Set the core file size to `unlimited` with `ulimit -c unlimited`.
----------------
$ ulimit -c
0
$ ulimit -c unlimited
$ ulimit -c
unlimited
----------------

Modern Linux system may behave somewhat differently.  In order to achieve this
simple classical core dump behavior, please ensure the following.

* Purge packages such as `apport-gtk` and `apport`.
* The `/proc/sys/kernel/core_pattern` file contains `core`.
* The `/proc/sys/kernel/core_uses_pid` file contains `0`.

Please read the `core`(5) manpage and the `ulimit` section in the `bash`(1)
manpage for more.

You can use GDB to inspect the `core` file as <<_gdb_prime8_gdb,Debug: level 3: gdb prime8-gdb>>.
