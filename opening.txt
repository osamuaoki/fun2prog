This "Fun to Program" is a work in progress.

If you find any issue, contact `<osamu at debian.org>` with a plain ascii
(non-html) mail.

Latest public version: http://people.debian.org/~osamu/fun2prog.html

Latest source tree: http://people.debian.org/~osamu/fun2prog.tar.xz

All contents are licensed as

* http://www.gnu.org/licenses/gpl2.html[GPL2] or later and 
* http://creativecommons.org/licenses/by-sa/3.0/[CC BY-SA 3.0] or later, and
* http://www.debian.org/misc/bsd.license[modified BSD].

(Pick any one of the licenses as you need if you take any parts of this.  This
is intended to be used for any purposes with least conflicts.)

Please note that the quoted part from the `ioputs.c` source remains in just LGPL (GNU Lesser General Public License).

== What this is

Please consider this as a *note of a self-study student*.

This is not mean to be a tutorial document to explain how to program 
nor authoritative document by an expert.

I recorded how I tried to learn programing basics of the modern large software
packages written in mixed languages using various complicated libraries. I
provide the followings:

* Learning records of my programing and building binaries.
* URL links to the essential technical information for learning.
* Minimal explanation and many simple examples.
* Some summary list of things to remember.
* Priority on POSIX shell, Python, and C. (on Debian system)

I hope this information is useful to others.

If the tailing parts of terminal example lines are dropped to fit within 80
character/line, they are indicated by `...` at the end of the line. (Or, I
forced them to fit using `fold` command.)

My local user name on this machine is `osamu`.  You may need to replace it with
your user name.

Please be careful about the publication date of reference documents since the
software infrastructure is a moving target and such documentations may be
obsoleted when you read this document.

TIP: If you find any questionable contents in this document, doubt them.  If 
you find errors, let me know.

=== Background

To be a Debian developer, I encounter situations to deal with large software
packages written in a combination of languages such as C, C++, Vala, Python,
Perl, Shell, LaTex, DocBook, ... with specialty cross platform build script
generators such as autotools and cmake.  Their build tools invoke commands such
as `./configure`, `make`, `gcc`, and `g++`.  These software packages tend to be
linked to many libraries which make them even more complex.

For example:

* GNOME: `gcc` + Glib + GTK+ + D-bus + Autoconf + Automake + Autopoint + ...
* KDE: MOC (Metaobject compiler) + `g++` + Qt (QtCore, QtGui, ...) + D-bus + Cmake + ...

Even with all these complexities, using these software package just for
backporting is not usually out-of-reach for me as a novice programmer with the
help of well designed packaging tools such as debhelper.  The package build
script can be deceptively simple as the following.

[source,makefile]
-----
%:
	dh $@
-----

But when I need to tweak something, I get overwhelmed with the complexity.  I
felt I have to practice program building and packaging with simpler case to
understand its fundamentals and to become a better Debian developer.

Also, being a maintainer, it is essential to know how debugger works to use it effectively.

There are new major technical challenges such as multitarch and fortify of
binary packages which I did not deal in "Debian New Maintainers' Guide".  These
needed to be addressed for newer packages, too.


