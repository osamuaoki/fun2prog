=== Glib and GObject

Dynamic memory management using `malloc()` etc. is a big headache when coding
with C.:

* http://www.gnu.org/software/libc/manual/html_node/Memory.html[Virtual Memory Allocation And Paging in The GNU C Library manual]
* http://en.wikipedia.org/wiki/C_dynamic_memory_allocation[C dynamic memory allocation] (Wikipedia)
* http://en.wikipedia.org/wiki/Mmap[mmap] (Wikipedia)

Such complication can be avoided using libraries such as Glib and GObject.

GLib is a general-purpose utility library, which provides many useful data
types, macros, type conversions, string utilities, file utilities, a mainloop
abstraction, utility data structures, and so on.  

`GString` offered in GLib is a data structure and associated methods offering
text buffers which grow automatically as text is added with the proper dynamic
memory management.

.Source to convert to upper case.
[source,c]
-----
include::lib/glib/upper.c[]
-----

If we try to guess the library name and header location, it is not easy to get them right.

.Manual failed compilation
-----
include::lib/glib/upper-ng.log[]
-----

Many modern libraries provide `*.pc` files in their development packages.  You
can use it with `pkg-config` to get proper compilation options for the glib
library.  Let's look for such thing for `glib`.

.Search the development package of Glib
-----
include::lib/glib/glib-apt.log[]
-----

If the `libglib2.0-dev` package has not been installed, install it now.

Search the right `*.pc` file for Glib for use with `pkg-config`.

.Search the right *.pc file for Glib
-----
include::lib/glib/glib-dpkg.log[]
-----

The `glib-2.0.pc` file is the right file.  

.The glib-2.0.pc file found on the Debian wheezy system.
-----
include::lib/glib/glib-2.0.pc[]
-----

The right compile and link options used by Glib is given as follows.

.Compile and link options used by Glib
-----
include::lib/glib/glib-pkg-config.log[]
-----

TIP: The Debian wheezy system on amd64 architecture has its `*.pc` file at
`/usr/lib/x86_64-linux-gnu/pkgconfig/glib-2.0.pc`.  Please note the additional
Multi-Arch specific `/x86_64-linux-gnu/` in its path.

By using this, the `upper.c` program can be compiled without error.

.Compilation of upper.c with Glib
-----
include::lib/glib/upper.log[]
-----

By adding the `-v` option, the compilation details are exposed.

.Compilation of upper.c with Glib with the -v option
-----
include::lib/glib/upper-v.log[]
-----

When reading http://developer.gnome.org/glib/stable/[GLib Reference Manual]
(via web or `devhelp`) and the source of GLib, please note that GLib is written
using its own fundamental type system.

==== Fundamental fixed size data types

GLib uses its own fixed size data types.

* Types prefixed by "g" which are equivalent of ones in standard C
** `gchar` `gint` `gshort` `glong` `gfloat` `gdouble`
* Unsined types prefixed by "gu" which are equivalent of unsined ones in standard C
** `guchar` `guint` `gushort` `gulong`
* Integer types with platform independent specified bit size
** `gint8` `guint8` `gint16` `guint16` `gint32` `guint32` `gint64` `guint64`
* Untyped pointer alias
** `gpointer`: C99 type `void*`
** `gconstpointer`: C99 type `const void*`
* New types which are not part of standard C
** `gboolean`: value=TRUE or FALSE
** `gsize`: C99 unsigned integer type `size_t` (usually 64bit or 32bit)
** `gssize`: C99 signed integer type `ssize_t` (usually 64bit or 32bit)
** `goffset`: C99 type `off64_t`
** `gintptr`: C99 type `intptr_t`
** `guintptr`: C99 type `uintptr_t`

==== Fundamental variable size data types

Glib offers its own variable size data types with associated routines such as
memory allocation for many utility data structures such as `GString`.

* `GList`: Doubly-Linked Lists -- linked lists that can be iterated over in both directions
* `GSList`: Singly-Linked Lists -- linked lists that can be iterated in one direction
* `GQueue`: Double-ended Queues -- double-ended queue data structure
* `GSequence`: Sequences -- scalable lists
* `GTrashStack`: Trash Stacks -- maintain a stack of unused allocated memory chunks
* `GHashTable`: Hash Tables -- associations between keys and values so that given a key the value can be found quickly
* `GString`: Strings -- text buffers which grow automatically as text is added
* `GStringChunk`: String Chunks -- efficient storage of groups of strings
* `GArray`: Arrays -- arrays of arbitrary elements which grow automatically as elements are added
* `GPtrArray`: Pointer Arrays -- arrays of pointers to any type of data, which grow automatically as new elements are added
* `GByteArray`: Byte Arrays -- arrays of bytes
* `GTree`: Balanced Binary Trees -- a sorted collection of key/value pairs optimized for searching and traversing in order
* `GNode`: N-ary Trees -- trees of data with any number of branches
* `GQuark`: Quarks -- a 2-way association between a string and a unique integer identifier
* `GData`: Keyed Data Lists -- lists of data elements which are accessible by a string or GQuark identifier
** `Datasets` -- associate groups of data elements with particular memory locations
* `GVariantType`: GVariantType -- introduction to the GVariant type system
* `GVariant`: GVariant -- strongly typed value datatype
** `GVariant Format Strings` -- varargs conversion of GVariants
** `GVariant Text Format` -- textual representation of GVariants

==== GObject

GObject provides a generic type system to register arbitrary single-inherited
flat and deep derived types as well as interfaces for structured types in C on
top of GLib fundamental data types.

C with GLib and GObject offers an alternative to C++ with its Standard library
although it requires many chores with
http://developer.gnome.org/gobject/stable/gtype-conventions.html[boiler plate
macro definitions].

The GTK+ GUI toolkit is build on the top of C with GLib and GObject.  If you
wish to simplify this coding process, please think about Vala.  For more see
the following section on this document and the followings:

See more at:

* http://en.wikipedia.org/wiki/GLib[GLib (wikipedia)]
* http://en.wikipedia.org/wiki/GObject[GObject (wikipedia)]
* http://developer.gnome.org/glib/stable/[GLib (upstream doc)], or via `devhelp`
* http://developer.gnome.org/gobject/stable/[GObject (upstream doc)], or via `devhelp`
* http://www.ibm.com/developerworks/linux/tutorials/l-glib/[Manage C data using the GLib collections] by Tom Copeland. (IBM DW, Date: 28 Jun 2005)
* http://lore.ua.ac.be/Publications/summary/Hendrickx2004.php[Glib-C: C as an alternative Object Oriented Environment] (PDF) by  Steven Hendrickx. (2004)

