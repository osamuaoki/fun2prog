=== Coding style ===

Follow the existing practice for the source.

Osamu's preference at this moment is as follows:

* For this document, 4 spaces as much as possible for any codes ...
* C and alike: normally Linux-style hardtab. (ts=8 noet)
* Python: 4 spaces (http://www.python.org/dev/peps/pep-0008/[The official indentation rule for Python], ts=4 sts=4 et)
* Other scripts: also 4 spaces or hardtab. (ts=4 sts=4 et/ts=8 noet)
* Lua: Language tutorial uses 2 spaces ... but sometimes hardtab

==== C coding style

There are 2 major practices for the C coding style.

* http://en.wikipedia.org/wiki/Indent_style#K.26R_style[K&R style]
* http://en.wikipedia.org/wiki/Indent_style#GNU_style[GNU style]

There are many variants in use.
 
* K: http://www.kernel.org/doc/Documentation/CodingStyle[Linux kernel coding style] (system -- K&R)
* B: http://git.busybox.net/busybox/tree/docs/style-guide.txt[Busybox Style Guide] (command line tool -- K&R)
* G: http://git.gnome.org/browse/gtk+/plain/docs/CODING-STYLE[GTK+ Coding Style] (GUI tool -- GNU)

Here are summary of the K&R styles.

* Keep it simple, Stupid! (KISS)
* Indentation and line style
** Use tab for indentation.
*** K: Use "`set tabstop=8 noexpandtab shiftwidth=8 textwidth=78`" but do not use vi modeline in the code.
  (For more: http://www.jukie.net/bart/blog/vim-and-linux-coding-style)
*** B: Use vi modeline "`vi: set sw=4 ts=4:`" in the code.
** Opening brace is at the last on the line with a preceding space (except for function)
*** K: Do not unnecessarily use braces where a single statement will do.
*** B: Use braces even for a single statement. (The "bracketless" approach is error prone.)
*** "opening word" -- "`switch`" -- "`case ...:`" -- "`default:`" -- "`}`" in the same tabstop.
* Space:
** No spaces used for indentation outside of comments and documentation.
** No spaces between function and its argument.
** No spaces between function like (pointer/address/type/size) operator and operand:
*** `sizeof  typeof  alignof  __attribute__  defined &  * . ->`
** No spaces between unary operators and its operand:
*** `+  -  ~  !  ++  --`
** No spaces (inside) parenthesized expressions.
** A space after (most) keywords:
*** `if switch case for do while` ...
** A space around (most) binary and ternary operators:
*** `=  +  -  <  >  *  /  %  |  &  ^  <=  >=  ==  !=  ?  :`
** No trailing whitespaces.
* Names:
** *GLOBAL* variables: descriptive, lowercase with `_`, no encoding of type.
** *LOCAL* variables: short and to the point, lowercase.
** *MACRO* constants: all uppercase
* K: Function code length should be 2 screens or less.
* K: Comment on *WHAT* but never explain *WHY* with `/* ... */`
* B: Comment before the logical block.
* K: Functions return values:
** Action function: add_work()
*** => return error code integer: (non-zero = failure, 0 = success)
** Predicate function: pci_dev_present() 
*** => return boolean: (0 = failure, non-zero = success)
* Do not use pre-ANSI function declaration.

See also http://www.teamten.com/lawrence/style/notes.html[Notes on Programming
Practices] by Lawrence Kesteloot for some detail C style examples.

* Some style avoids the use of https://live.gnome.org/GTK+/BestPractices[C99 style line comment] preceded by "`//`" for compatibility.
* Some style promotes the use of C99 style http://www.greenend.org.uk/rjk/tech/inline.html[inline functions in C] over macro.
* Some style promotes the use of "`enum { VAR = VALUE };`" or C99 style "`const <type> var = value;`" over macro "`#define VAR VALUE`".
* GNU style uses http://www.gnu.org/prep/standards/standards.html#Writing-C[GNU Coding Standards: Formatting Your Source Code] which is significantly different from K&R such as indentation with 2 spaces etc.

==== Naming conventions

Basic naming convention used in C is:

* normal identifiers: `lowercase`, `lower_case`, ...
** integer temporary variables: `i`, `j`, `k`, `m`, `n`, ...
** character temporary variables: `c`, `d`, `e`, ...
** macro names: `UPPERCASE`, `UPPER_CASE`
* system reserved identifiers: `__???`, `_Uppercase`, `???__`, `__???__`, ...

For many object oriented languages,
http://en.wikipedia.org/wiki/CamelCase[CamelCase] naming convention is
introduced to differentiate between class name and class instance name.

* class, interfaces, enums: `UpperCamelCase`
* methods,  local variables, fields:
** `lowerCamelCase` : Java, JavaScript, http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml?showone=Type_Names#Type_Names[C++ (Google)], ...
** `lower_case` : Python, Ruby, Vala, Lua, ...
* constant: `UPPER_CASE`

The http://en.wikipedia.org/wiki/Hungarian_notation[Hungarian Notation]
especially Systems Hungarian which encodes the physical data type into prefix is
deplored.  There are http://www.joelonsoftware.com/articles/Wrong.html[some
defense to Apps Hungarian which encodes the logical data type into prefix].

* http://www.ibm.com/developerworks/java/library/j-noaccent/index.html[Speaking the Java language without an accent] (IBM DW, Jan. 2010)

==== Reformat ====

Reformat source with `indent`:

----
$ indent -linux foo.c
----

* -linux : Linux
* -kr    : K&R coding style
* -gnu   : GNU coding style

=== Document style

==== GNOME

There are four golden rules:

* Limit each sentence to less than 25 words.
* Limit each paragraph to one topic.
* Provide instructions rather than descriptions.
* Write in a neutral tone.

See more at
http://developer.gnome.org/gdp-style-guide/stable/[GNOME Documentation Style Guide]
and
http://developer.gnome.org/gdp-handbook/stable/[GDP Documentation Guidelines] .

==== SUSE

See
http://doc.opensuse.org/products/opensuse/Styleguide/opensuse_documentation_styleguide_sd/[Documentation Style Guide] .

==== GNU

See
http://www.fsf.org/licensing/gnu-press/GNU-Press-styleguide.pdf[A Style Guide for GNU Documentation (PDF)] .

==== EC

European Commission recommends in 
http://ec.europa.eu/translation/english/guidelines/documents/styleguide_english_dgt_en.pdf[How to write clearly (PDF)]
(http://www.fjfhs.eu/[HTML]) as:

* Think before you write
* Focus on the reader — be direct and interesting
* Get your document into shape
* KISS: Keep It Short and Simple
* Make sense — structure your sentences
* Cut out excess nouns – verb forms are livelier
* Be concrete, not abstract
* Prefer active verbs to passive — and name the agent
* Beware of false friends, jargon and abbreviations
* Revise and check

==== Wikipedia

See
http://en.wikipedia.org/wiki/List_of_style_guides[Wikipedia: List of style guides] .


