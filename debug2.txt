== Debug: level 2

Tracing program execution to understand the general behavior of the program is
the major part of debugging.

There are several ways to trace programs non-interactively without any modifications to the source.

=== sh -x

All POSIX shell like shells (Bash, Pdksh, Dash, ...) support the `-x` option to turn on the automatic tracing of the command execution.

----
 $ sh -x program.sh
----

The tracing of the command execution can be truned on and off by the "`set -x`" and "`set +x`" commands, too.

=== perl -d:Trace

All Perl scripts can be traced automatically.

----
 $ sudo apt-get install libdevel-trace-perl
 $ perl -x program.pl
----

The tracing of the command execution can be truned on and off by the "`$Devel::Trace::TRACE = 1;`" and "`$Devel::Trace::TRACE = 0;`" commands, too.

Perl also can offer interactive console by starting its debugger with "`perl -de1`". See http://perldoc.perl.org/perlfaq3.html[Perl FAQ - Programming Tools].

There are http://www.sukria.net/perlconsole.html[Perl Console] (the `perlconsole` package), http://gnp.github.io/psh/[Perl Shell (psh)], and several packages found with "perl shell", too.

=== python -m trace

All Python scripts can be traced automatically.

----
 $ python -m trace --count -C . program.py
----

See the https://docs.python.org/3/library/trace.html[trace] module.

=== strace

This is very effective tools to investigate what a program does without
reading its full source at the system calll level.

Let's investigate how the `hello-gdb` ELF binary 
(see <<_compile_hello_gdb,ELF: Compile hello-gdb>>) is executed.

The trace of the system call is obtained with `strace`.

----
include::hello/c/hello-gdb-strace.log[]
----

This can get too big to read.

The statistics of the system call is obtained with `strace -c` to get the big picture.

----
include::hello/c/hello-gdb-strace-c.log[]
----

Now you know which system calls to trace, use `strace -e trace=...`.  For
example what files are accessed can be done just tracing `open`.

----
include::hello/c/hello-gdb-strace-e.log[]
----

=== ltrace

This is very effective tools to investigate what a program does without
reading its full source at the library call level.

Let's investigate how the `hello-gdb` ELF binary 
(see <<_compile_hello_gdb,ELF: Compile hello-gdb>>) is executed from a different angle.

The trace of the library call is obtained with `ltrace`.

----
include::hello/c/hello-gdb-ltrace.log[]
----

The statistics of the library call is obtained with `ltrace -c`.

----
include::hello/c/hello-gdb-ltrace-c.log[]
----

But the use of `ltrace` slows down program execution significantly for some
case.  Use it carefully.

Here are some similar tracing programs.

* `xtrace` package: trace communication between X client and server
* `latrace` package: traces library calls in dynamically linked programs with LD_AUDIT feature

