== Code examples

Here are code examples which I thought interesting.

=== Encrypted code

Let's make an obfuscated shell code by encrypting its real code contents.
The following creates an encrypted ASCII file `hello.asc` (passphrase used was
"secret") from `hello`.

.Encrypting `hello` shell script into `hello.asc`
[source,shell]
-----
include::ideas/sh/gpg.txt[]
-----

Let's add decrypting shell code to this `hello.asc` to make an obfuscated
Shell `hello-secret` as follows.

.Obfuscated Shell `hello-secret`
----
include::ideas/sh/hello-secret[]
----

This script can be executed if you know the secret passphrase as follows.

.Executing `hello-secret` while providing the passphrase
----
include::ideas/sh/hello-secret.txt[]
----

=== Check modification

The identity verification of a file can be simplified by using
http://en.wikipedia.org/wiki/Cryptographic_hash_function[cryptographic hash function]
such as:

 * http://en.wikipedia.org/wiki/SHA-1[SHA-1]
 * http://en.wikipedia.org/wiki/MD5[MD5]
 * ...

Sometimes, you wish to check non-malicious user modifications to a
configuration file from the configuration helper script.  Here is a very light
weight check method without GPG signature which I deployed for the im-config
package.

.An example of configuration file `test.conf`
----
include::ideas/hush/test.conf.in[]
----

You can add a signature generated by the MD5 cryptographic hash function to
this configuration file `test.conf`.

.Add the MD5 hush value
[source,shell]
-----
include::ideas/hush/md5add.log[]
-----

Let's verify that this has not been inadvertently modified by users with the
MD5 hush value.

.Check the MD5 hush value before modification
[source,shell]
-----
include::ideas/hush/md5chk.log[]
-----

Let's make a modification to `test.conf` and check with the same method.

.Check the MD5 hush value after modification
[source,shell]
-----
include::ideas/hush/md5mod.log[]
-----

This method is only good for detecting non-malicious user modifications.

