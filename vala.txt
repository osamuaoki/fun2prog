=== Vala

Vala is a programming language specifically designed to ease the traditional C
coding process for GNOME3. The Vala compiler generates C codes using the object system of GNOME with GLib, GObject, etc.  Vala offers capabilities such as:

* access to the modern object oriented language features such as `class`,
* access to the automatic memory management system based on the reference counting,
* access to all C libraries, and
* generation of native binaries with the C API.

Writing codes for GNOME with the plain C is very tedious and error prone
process. But Writing codes for GNOME in Vala is very simple and straigtfrward
process just like writing codes under high-level languages such as Python,
Java, or MONO/C#.

TIP: Vala does not free you from thinking in C.  Think Vala as a nice pre-processor.

Let's start here:

* https://live.gnome.org/Vala/Tutorial[Vala Tutorial]
* http://valadoc.org/#!wiki=index[Valadoc Online API Documentation]

In Vala, GLib and GObject objects are available as default.  Almost any
libraries written in C can be accessed from Vala by declaring `using ...;` at
the top using Vala bindings defined as VAPI files located in the `/usr/share/vala*/vapi/` directory.

// method using GI file made with `vala-gen-introspect` seems to be obsoleted

https://live.gnome.org/Vala/Bindings[Vala binding to GObject-based libraries] are generated automatically as:

* generating GObject Introspection GIR file (stored in the `/usr/share/gir-1.0` directory)
* generation the VAPI binding from the GIR file with `vapigen`
* tweaking the binding generation with metadata and custom code
* their VAPI files contain "generated by vapigen" in it.

https://live.gnome.org/Vala/ExternalBindings[Vala binding to non-GObject-based
C libraries] are manually generated and their VAPI files do not contain
"generated by vapigen" in it.

The C API is always available in the pertinent manpage, info page, or
documentations accessed via `devhelp`.  But Vala API is a bit difficult to get
at this moment and explained as below.

C API names of many libraries are mapped to Vala ones with the similar naming
convention as GLib naming convention as:

* C API: `g_topic_foobar()`
* Vala API: `GLib.Topic.foobar()`

The exact mapping from C API names to Vala ones is defined in `*.vapi` (Vala
API) files found in `/usr/share/vala*/vapi/`.  For example, on Debian wheezy:

* Glib: `/usr/share/vala-0.16/vapi/glib-2.0.vapi`
* GObject: `/usr/share/vala-0.16/vapi/gobject-2.0.vapi`
* GTK+: `/usr/share/vala-0.16/vapi/gtk+-3.0.vapi`
* POSIX: `/usr/share/vala-0.16/vapi/posix.vapi` (libc/libm library)
* CURSES: `/usr/share/vala-0.16/vapi/curses.vapi` (curses library)

These `*.vapi` (Vala API) files are written in Vala language with extensive use
of the https://live.gnome.org/Vala/Manual/Attributes[attributes] such as
`CCode`.  Here are some cliches used in `*.vapi` files:

* `[CCode (cprefix ...)]`
** This is primarily used for namespaces. While when left to its
   own devices valac will simply concatenate the parent names to
   generate C type names, setting the `cprefix` allows you to
   override this. For instance, assuming you have a class
   `Foo.Bar.Baz`, setting a cprefix of "`Fubar`" on a your `Bar`
   namespace will result in a C name of "`FubarBaz`" for the `Baz`
   class.
* `[CCode (lower_case_cprefix ...)]`
** This overrides everything up to the start of
   the method name. For instance, a method named `Foo.Bar.baz` would
   normally result in a C name of `foo_bar_baz`. However, if you set
   the `lower_case_cprefix` of the `bar` class to be "`fb_`", the
   resulting C name would be "`fb_baz`".
* `[CCode (cname ...)]`
** This sets the C name to exactly what you specify here. For
   instance, if you set the `cname` of a `Foo.Bar.baz` method to
   "`bacon`", the name of the `Foo.Bar.baz` function in C will be
   "`bacon`".

Here are some reminders for errors when using Gtk.Builder with Vala.

* Forgetting to use `[CCode (instance_pos = -1)]` when using instance
  methods instead of static methods as handlers

* Forgetting to mangle the handler method names in Glade, e.g. from
  `FooBar.my_handler` to `foo_bar_my_handler`

* Not using the right signature for the handler. One missing parameter
  or one parameter too much will result in a segmentation fault.

Let me explain the last case a bit more.  If the signal signature is

-----
public class Area : Object {
    public signal void clicked (int x, int y);
}
-----

then the handler method must have *exactly* these parameters in order
to work with Gtk.Builder's auto-connect:

-----
[CCode (instance_pos = -1)]
public void on_clicked (Area source, int x, int y) { }
-----

Vala can't recognize this mistake, because auto-connection happens at
runtime an it doesn't know at compile-time which method will be connected
to which signal.

See also:

* https://live.gnome.org/Vala[Vala - Compiler for the GObject type system] -- Homepage
* https://live.gnome.org/Vala/Documentation[Vala - Documentation] -- Sample Code
* https://live.gnome.org/Vala/Manual[Vala - Manual (Draft)]
* https://live.gnome.org/Vala/Hacking[Hackers' Guide to Vala]
* C API documentation found in `devhelp` or for http://developer.gnome.org/glib/unstable/[GLib], http://developer.gnome.org/gobject/unstable/[GObject], and http://www.gtk.org/documentation.php[GTK+].

