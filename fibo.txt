== Fibonacci numbers

The http://en.wikipedia.org/wiki/Fibonacci_number[Fibonacci numbers] are a
sequence of integers, starting with 0, 1 and continuing 1, 2, 3, 5, 8, 13, ...,
each new number being the sum of the previous two. 

Let's check simple code snippets to obtain Fibonacci numbers implemented in
different languages to study the following:

* basic while-loop syntax
* integer overflow behavior

=== Shell

Before we start, let's check the integer overflow behavior of the shell on the
64-bit GNU/Linux platform.

.Dash behavior for the integer overflow etc.
[source,sh]
----
include::fibo/sh/integer-dash.log[]
----

.Bash behavior for the integer overflow etc.
[source,sh]
----
include::fibo/sh/integer-bash.log[]
----

The arithmetic expression always returns the largest positive integer when overflows for Dash.

The "`**`" operator for arithmetic expression in "`$((...))`" is not POSIX but an usable extension for Bash.

TIP: For arbitrary precision calculation, always use "`bc`".

Here is a shell program for the Fibonacci numbers.

.Source code for the shell script: fibo
[source,sh]
----
include::fibo/sh/fibo[]
----

Even with some overflow protection is coded in this to avoid infinite loop, if
you provide an argument to "`./fibo`" which is larger than "`$(echo '2^63' | bc)`" 
then this program will fail in a cryptic way.

.Error with the integer overflow for the shell script
----
include::fibo/sh/fibo-test.log[]
----

TIP: Do not abuse shell code when integer overflow may occur.  Its response to the overflow is cryptic.


=== Python

Here is a Python program for the Fibonacci numbers.

.Source code for the Python script: fibo
[source,python]
----
include::fibo/python/fibo[]
----

TIP: Python3 integer supports the arbitrary precision number which does not overflow :-)

=== Lua

Here is a Lua program for the Fibonacci numbers.

.Source code for the Lua script: fibo
[source,lua]
----
include::fibo/lua/fibo[]
----

Lua automatically converts large integer numbers to the double type.

.Behavior with the large integer for the Lua script
----
include::fibo/lua/fibo-test.log[]
----

TIP: Be careful with the behavior of Lua for large integer numbers :-)

=== Perl

Here is a Perl program for the Fibonacci numbers.

.Source code for the Perl script: fibo
[source,lua]
----
include::fibo/perl/fibo[]
----

Perl automatically converts large integer numbers to the double type.

.Behavior with the large integer for the Perl script
----
include::fibo/perl/fibo-test.log[]
----

TIP: Be careful with the behavior of Perl for large integer numbers :-)

=== C

Before we start, let's check the integer overflow behavior of "`strtol`" on the
64-bit GNU/Linux platform using simple test code.  (This is more like how Dash
behaves as of 2013.)

.C long behavior for the integer overflow
[source,C]
----
include::fibo/c/strtol-test.c[]
----

Let's compile and test this C code.

.Testing the C `strtol` with the integer overflow
----
include::fibo/c/strtol-test.log[]
----

The C `strtol` always returns the largest positive integer when overflows,

Here is a C program for the Fibonacci numbers.

.Source code for the C: fibo.c
[source,C]
----
include::fibo/c/fibo.c[]
----

The C long sufferes overflow and needs to be dealt carefully.

.Error with the integer overflow for C
----
include::fibo/c/fibo-test.log[]
----

TIP: Be careful with overflow.

The size of C variables are platform dependent.  Let's check it with simple program.

.Source code for the C: checksize.c
[source,C]
----
include::fibo/c/checksize.c[]
----

.Size of variables on C
----
include::fibo/c/checksize.log[]
----

=== Vala

Here is a vala program for the Fibonacci numbers.

.Source code for the Vala: fibo.vala
[source,Vala]
----
include::fibo/vala/fibo.vala[]
----

The vala long (=C long) sufferes overflow and needs to be dealt carefully.

.Error with the integer overflow for Vala
----
include::fibo/vala/fibo-test.log[]
----

TIP: Be careful with overflow.
